    T(n)            Theta(T(n))
1. an + b        | n
2. an^2 + bn + c | n^2
3. an log(n) +c  | n log(n)
4. a log(n) + c  | log(n)

Recursion Tree for solving recurrence
replace n with the corresponding node of the tree
base: T(n/2) + T(n/2) + cn
first nodes: T(n/2) = 2T(n/4) + c(n/2)
substitute into base:: T(n) = 2[2T(n/4) + c(n/2)] + cn
second nodes: T(n/4) = 2T(n/8) + C(n/4)
substitute into base: 4[2T(n/8) + c(n/4)] + 2cn
reduce the pattern: 2^3 T(2/2^3) + 3cn
introduce variables: 2^k T(n/2^k) + kcn
    where k = log(n)
simplify base: T(n) = nT(n/n) + log(n) + cn
    T(n) = cn + cn log(n)
        which is n log(n)

T(n) = T1(n) + T2(n) + T3(n)
T(n) = Theate(n) + Theta(n^2) + Theta(nlog(n))
Theta(T(n)) = max[Theta(n),Theta(n^2),Theta(nlog(n))]

t1(n) = a1n + b
t2(n) a2n^2 + b2n + c
T3(n) = anlog(n) + b3n + c2
t(n) = T1(n)+T2(n)+T2(n) = an^2 + a3nlog(n)
Theta(T(N) = n^2, n<n0

BuildMaxHeap
c1 + c2 * n/2 * log(n)
 c1 + c2 * n * log(n)
 n log(n)